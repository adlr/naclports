diff --git a/configure b/configure
index 81bf644..302c5e3 100755
--- a/configure
+++ b/configure
@@ -17712,7 +17712,7 @@ if test "x$GXX" = "xyes"; then
       *-std=*)
         ;;
       *)
-        CXXFLAGS="$CXXFLAGS -ansi"
+        CXXFLAGS="$CXXFLAGS"
         ;;
       esac
     ;;
diff --git a/cpp/Makefile.am b/cpp/Makefile.am
index f381e58..8d60e9d 100644
--- a/cpp/Makefile.am
+++ b/cpp/Makefile.am
@@ -5,8 +5,14 @@ INCLUDES =					\
 	$(libjpeg_includes)			\
 	$(libtiff_includes)			\
 	$(libjpeg2000_includes)			\
+	$(cairo_includes)			\
 	$(libpng_includes)
 
+if BUILD_CAIRO_OUTPUT
+cairo_includes =				\
+	$(CAIRO_CFLAGS)
+endif
+
 if BUILD_LIBJPEG
 libjpeg_includes = $(LIBJPEG_CFLAGS)
 endif
@@ -67,6 +73,7 @@ libpoppler_cpp_la_CXXFLAGS =			\
 
 libpoppler_cpp_la_LIBADD = 			\
 	$(top_builddir)/poppler/libpoppler.la	\
+	$(top_builddir)/poppler/libpoppler-cairo.la	\
 	$(LIBICONV)
 
 libpoppler_cpp_la_LDFLAGS = -version-info 2:0:2 @create_shared_lib@ @auto_import_flags@
diff --git a/cpp/Makefile.in b/cpp/Makefile.in
index 77b8af3..76c7005 100644
--- a/cpp/Makefile.in
+++ b/cpp/Makefile.in
@@ -491,8 +491,12 @@ INCLUDES = \
 	$(libjpeg_includes)			\
 	$(libtiff_includes)			\
 	$(libjpeg2000_includes)			\
+	$(cairo_includes)			\
 	$(libpng_includes)
 
+@BUILD_CAIRO_OUTPUT_TRUE@cairo_includes = \
+@BUILD_CAIRO_OUTPUT_TRUE@	$(CAIRO_CFLAGS)
+
 @BUILD_LIBJPEG_TRUE@libjpeg_includes = $(LIBJPEG_CFLAGS)
 @BUILD_LIBTIFF_TRUE@libtiff_includes = $(LIBTIFF_CFLAGS)
 @BUILD_LIBOPENJPEG_TRUE@libjpeg2000_includes = $(LIBOPENJPEG_CFLAGS)
@@ -540,6 +544,7 @@ libpoppler_cpp_la_CXXFLAGS = \
 
 libpoppler_cpp_la_LIBADD = \
 	$(top_builddir)/poppler/libpoppler.la	\
+	$(top_builddir)/poppler/libpoppler-cairo.la	\
 	$(LIBICONV)
 
 libpoppler_cpp_la_LDFLAGS = -version-info 2:0:2 @create_shared_lib@ @auto_import_flags@
diff --git a/cpp/poppler-document.cpp b/cpp/poppler-document.cpp
index 1c24b47..732c252 100644
--- a/cpp/poppler-document.cpp
+++ b/cpp/poppler-document.cpp
@@ -30,6 +30,7 @@
 #include "ErrorCodes.h"
 #include "GlobalParams.h"
 #include "Outline.h"
+#include "CairoOutputDev.h"
 
 #include <algorithm>
 #include <iterator>
@@ -42,6 +43,7 @@ unsigned int poppler::initer::count = 0U;
 initer::initer()
 {
     if (!count) {
+      printf("making new globalparams\n");
         globalParams = new GlobalParams();
         setErrorCallback(detail::error_function, NULL);
     }
@@ -662,3 +664,78 @@ document* document::load_from_raw_data(const char *file_data,
                                 owner_password, user_password);
     return document_private::check_document(doc, 0);
 }
+
+namespace poppler {
+SimpleDocument::SimpleDocument(const char* buf, size_t length)
+    : buf_copy_(new char[length]),
+      buf_len_(length),
+      doc_(NULL), out_dev_(NULL), initer_(NULL) {
+  initer_ = new initer();
+  printf("about to do memcpy\n");
+  memcpy(buf_copy_, buf, length);
+  printf("memcpy done\n");
+  Object obj;
+  printf("about to do memstream\n");
+  MemStream* stream = new MemStream(buf_copy_, 0, length, obj.initNull());
+  printf("about to do pdfdoc\n");
+  doc_ = new PDFDoc(stream);  // takes ownership of stream
+  printf("about to do cairo out dev\n");
+  out_dev_ = new CairoOutputDev();
+  printf("about to do start doc on cairo\n");
+  out_dev_->startDoc(doc_);
+  printf("sipmle doc ctor done\n");
+}
+SimpleDocument::~SimpleDocument() {
+  printf("~smpledoc: %d\n", __LINE__);
+  delete out_dev_;
+  printf("~smpledoc: %d\n", __LINE__);
+  out_dev_ = NULL;
+  printf("~smpledoc: %d\n", __LINE__);
+  delete doc_;
+  printf("~smpledoc: %d\n", __LINE__);
+  doc_ = NULL;
+  printf("~smpledoc: %d\n", __LINE__);
+  delete[] buf_copy_;
+  printf("~smpledoc: %d\n", __LINE__);
+  buf_copy_ = NULL;
+  printf("~smpledoc: %d\n", __LINE__);
+  delete ((initer*)initer_);
+  printf("~smpledoc: %d\n", __LINE__);
+  initer_ = NULL;
+  printf("~smpledoc: %d\n", __LINE__);
+}
+void SimpleDocument::RenderPage(size_t page, bool printing, cairo_t* cairo) {
+  out_dev_->setCairo(cairo);
+  out_dev_->setPrinting(printing);
+
+  cairo_save(cairo);
+  doc_->displayPageSlice(out_dev_, page,
+                         72.0, 72.0,
+                         0, // rotate
+                         false, // media box
+                         true, // crop box
+                         printing,
+                         -1, -1, -1, -1);  // slice
+  cairo_restore(cairo);
+  out_dev_->setCairo(NULL);
+}
+
+int SimpleDocument::GetNumPages() {
+  return doc_->getNumPages();
+}
+
+double SimpleDocument::GetPageWidth(int page) {
+  int rotate = doc_->getPageRotate(page);
+  if (rotate == 90 || rotate == 270)
+    return doc_->getPageCropHeight(page);
+  return doc_->getPageCropWidth(page);
+}
+
+double SimpleDocument::GetPageHeight(int page) {
+  int rotate = doc_->getPageRotate(page);
+  if (rotate == 90 || rotate == 270)
+    return doc_->getPageCropWidth(page);
+  return doc_->getPageCropHeight(page);
+}
+
+}  // namespace poppler
diff --git a/cpp/poppler-document.h b/cpp/poppler-document.h
index dfae398..8612cb9 100644
--- a/cpp/poppler-document.h
+++ b/cpp/poppler-document.h
@@ -19,9 +19,15 @@
 #ifndef POPPLER_DOCUMENT_H
 #define POPPLER_DOCUMENT_H
 
+#include <cairo.h>
+
 #include "poppler-global.h"
 #include "poppler-font.h"
 
+class PDFDoc;
+class CairoOutputDev;
+class MemStream;
+
 namespace poppler
 {
 
@@ -99,6 +105,26 @@ private:
     friend class document_private;
 };
 
+class SimpleDocument {
+ public:
+  SimpleDocument(const char* buf, size_t length);
+  ~SimpleDocument();
+  void RenderPage(size_t page, bool printing, cairo_t* cairo);
+  int GetNumPages();
+  // Uses PDF crop box:
+  double GetPageWidth(int page);
+  double GetPageHeight(int page);
+  const char* buf() const { return buf_copy_; }
+  size_t buf_len() const { return buf_len_; }
+
+ private:
+  char* buf_copy_;
+  size_t buf_len_;
+  PDFDoc* doc_;
+  CairoOutputDev* out_dev_;
+  void* initer_;
+};
+
 }
 
 #endif
diff --git a/cpp/poppler-page-renderer.cpp b/cpp/poppler-page-renderer.cpp
index 1317192..acfa792 100644
--- a/cpp/poppler-page-renderer.cpp
+++ b/cpp/poppler-page-renderer.cpp
@@ -28,6 +28,9 @@
 #include "SplashOutputDev.h"
 #include "splash/SplashBitmap.h"
 #endif
+#ifdef HAVE_CAIRO
+#include "CairoOutputDev.h"
+#endif  // HAVE_CAIRO
 
 using namespace poppler;
 
@@ -37,11 +40,17 @@ public:
     page_renderer_private()
         : paper_color(0xffffffff)
         , hints(0)
+#ifdef HAVE_CAIRO
+        , cairo_output_dev(NULL)
+#endif  // HAVE_CAIRO
     {
     }
 
     argb paper_color;
     unsigned int hints;
+#ifdef HAVE_CAIRO
+    CairoOutputDev* cairo_output_dev;
+#endif  // HAVE_CAIRO
 };
 
 
@@ -195,6 +204,61 @@ image page_renderer::render_page(const page *p,
 }
 
 /**
+ Render the specified page to the given cairo_t.
+
+ This functions renders the specified page on an image following the specified
+ parameters, returning it.
+
+ \param cr the output cairo_t
+ \param p the page to render
+ \param xres the X resolution, in dot per inch (DPI)
+ \param yres the Y resolution, in dot per inch (DPI)
+ \param x the X top-right coordinate, in pixels
+ \param y the Y top-right coordinate, in pixels
+ \param w the width in pixels of the area to render
+ \param h the height in pixels of the area to render
+ \param rotate the rotation to apply when rendering the page
+
+ \see render_page
+ */
+void page_renderer::cairo_render_page(void* cr, const page *p,
+                                      bool printing,
+                                      double xres, double yres,
+                                      int x, int y, int w, int h,
+                                      rotation_enum rotate)
+{
+    printf("called cairo_render_page\n");
+#ifdef HAVE_CAIRO
+    if (!p) {
+        printf("missing page in cairo render\n");
+        return;
+    }
+
+    cairo_t* typed_cr = reinterpret_cast<cairo_t*>(cr);
+    page_private *pp = page_private::get(p);
+    PDFDoc *pdfdoc = pp->doc->doc;
+
+    if (!d->cairo_output_dev) {
+        d->cairo_output_dev = new CairoOutputDev();
+        d->cairo_output_dev->startDoc(pdfdoc);
+    }
+    d->cairo_output_dev->setCairo(typed_cr);
+    d->cairo_output_dev->setPrinting(printing);
+
+    cairo_save(typed_cr);
+    printf("calling display page slice for page %d (1 idx)\n", pp->index + 1);
+    pdfdoc->displayPageSlice(d->cairo_output_dev, pp->index + 1,
+                             xres, yres, int(rotate) * 90,
+                             gFalse, gTrue, printing,
+                             x, y, w, h);
+    cairo_restore(typed_cr);
+    d->cairo_output_dev->setCairo(NULL);
+#else
+    printf("MISSING CAIRO IN POPPLER!\n");
+#endif  // HAVE_CAIRO
+}
+
+/**
  Rendering capability test.
 
  page_renderer can render only if a render backend ('Splash') is compiled in
diff --git a/cpp/poppler-page-renderer.h b/cpp/poppler-page-renderer.h
index 1383865..f38be43 100644
--- a/cpp/poppler-page-renderer.h
+++ b/cpp/poppler-page-renderer.h
@@ -53,6 +53,11 @@ public:
                       double xres = 72.0, double yres = 72.0,
                       int x = -1, int y = -1, int w = -1, int h = -1,
                       rotation_enum rotate = rotate_0) const;
+    void cairo_render_page(void* cr, const page *p,
+                           bool printing,
+                           double xres = 72.0, double yres = 72.0,
+                           int x = -1, int y = -1, int w = -1, int h = -1,
+                           rotation_enum rotate = rotate_0);
 
     static bool can_render();
 
diff --git a/cpp/tests/Makefile.in b/cpp/tests/Makefile.in
index 2e4cab9..8aea355 100644
--- a/cpp/tests/Makefile.in
+++ b/cpp/tests/Makefile.in
@@ -249,7 +249,7 @@ LIBOPENJPEG_CFLAGS = @LIBOPENJPEG_CFLAGS@
 LIBOPENJPEG_LIBS = @LIBOPENJPEG_LIBS@
 LIBPNG_CFLAGS = @LIBPNG_CFLAGS@
 LIBPNG_LIBS = @LIBPNG_LIBS@
-LIBS = @LIBS@
+LIBS = @LIBS@ @CAIRO_LIBS@
 LIBTIFF_CFLAGS = @LIBTIFF_CFLAGS@
 LIBTIFF_CFLAGSS = @LIBTIFF_CFLAGSS@
 LIBTIFF_LIBS = @LIBTIFF_LIBS@
@@ -383,11 +383,16 @@ AM_LDFLAGS = @auto_import_flags@
 INCLUDES = \
 	-I$(top_srcdir)				\
 	-I$(top_srcdir)/utils			\
+	$(cairo_includes)			\
 	-I$(top_srcdir)/cpp
 
+@BUILD_CAIRO_OUTPUT_TRUE@cairo_includes = \
+@BUILD_CAIRO_OUTPUT_TRUE@	$(CAIRO_CFLAGS)
+
 LDADDS = \
 	$(top_builddir)/poppler/libpoppler.la	\
-	$(top_builddir)/cpp/libpoppler-cpp.la
+	$(top_builddir)/cpp/libpoppler-cpp.la	\
+	$(top_builddir)/poppler/libpoppler-cairo.la
 
 poppler_dump_SOURCES = \
 	$(top_srcdir)/utils/parseargs.cc	\
diff --git a/goo/gfile.cc b/goo/gfile.cc
index 44beddd..e85a094 100644
--- a/goo/gfile.cc
+++ b/goo/gfile.cc
@@ -806,8 +806,8 @@ void GDir::rewind() {
 #elif defined(ACORN)
 #elif defined(MACOS)
 #else
-  if (dir)
-    rewinddir(dir);
+  //if (dir)
+  //  rewinddir(dir);
 #ifdef VMS
   needParent = strchr(path->getCString(), '[') != NULL;
 #endif
diff --git a/poppler/CairoOutputDev.cc b/poppler/CairoOutputDev.cc
index 77bd245..6b295f2 100644
--- a/poppler/CairoOutputDev.cc
+++ b/poppler/CairoOutputDev.cc
@@ -161,10 +161,12 @@ CairoOutputDev::CairoOutputDev() {
 
   // the SA parameter supposedly defaults to false, but Acrobat
   // apparently hardwires it to true
+  printf("getting stroke adjust: 0x%zx\n", (size_t)globalParams);
   stroke_adjust = globalParams->getStrokeAdjust();
   align_stroke_coords = gFalse;
   adjusted_stroke_width = gFalse;
   xref = NULL;
+  printf("ctor done\n");
 }
 
 CairoOutputDev::~CairoOutputDev() {
diff --git a/poppler/Lexer.cc b/poppler/Lexer.cc
index c620529..17d8ca1 100644
--- a/poppler/Lexer.cc
+++ b/poppler/Lexer.cc
@@ -39,6 +39,10 @@
 #include "Error.h"
 #include "XRef.h"
 
+#ifndef LLONG_MAX
+#define LLONG_MAX __LONG_LONG_MAX__
+#endif
+
 //------------------------------------------------------------------------
 
 // A '1' in this array means the character is white space.  A '1' or
diff --git a/poppler/PDFDoc.cc b/poppler/PDFDoc.cc
index c78d5ca..7c83593 100644
--- a/poppler/PDFDoc.cc
+++ b/poppler/PDFDoc.cc
@@ -78,6 +78,10 @@
 #include "PDFDoc.h"
 #include "Hints.h"
 
+#ifndef LLONG_MAX
+#define LLONG_MAX __LONG_LONG_MAX__
+#endif
+
 #if MULTITHREADED
 #  define pdfdocLocker()   MutexLocker locker(&mutex)
 #else
diff --git a/poppler/Parser.cc b/poppler/Parser.cc
index a021994..63ce7af 100644
--- a/poppler/Parser.cc
+++ b/poppler/Parser.cc
@@ -31,6 +31,7 @@
 #pragma implementation
 #endif
 
+#include <limits.h>
 #include <stddef.h>
 #include "Object.h"
 #include "Array.h"
